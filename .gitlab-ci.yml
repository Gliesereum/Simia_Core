stages:
  - prebuild
  - build
  - stop-container
  - prepackage
  - package
  - deploy
  
variables:
  PROJECT_HOME: "/usr/gliesereum"
  
git-pull:
  stage: prebuild
  script:
    - echo 'Git pull'
    - cd $PROJECT_HOME
    - sudo git pull
  only:
    - gls/dev

gradle-build:
  stage: build
  script:
    - echo 'Gradle build'
    - cd $PROJECT_HOME
    - sudo gradle clean build -b=account/build.gradle --no-daemon
    - sudo gradle clean build -b=discovery/build.gradle --no-daemon
    - sudo gradle clean build -b=proxy/build.gradle --no-daemon
    - sudo gradle clean build -b=mail/build.gradle --no-daemon
    - sudo gradle clean build -b=permission/build.gradle --no-daemon
    - sudo gradle clean build -b=karma/build.gradle --no-daemon
    - sudo gradle clean build -b=file/build.gradle --no-daemon
    - sudo gradle clean build -b=lending-gallery/build.gradle --no-daemon
#    - sudo gradle clean build -b=socket/build.gradle --no-daemon
    - sudo gradle clean build -b=notification/build.gradle --no-daemon
  only:
    - gls/dev

docker-stop-container:
  stage: stop-container
  script:
    - echo 'Docker stop containers'
    - cd $PROJECT_HOME
    - docker stack rm gls
    - sleep 30
    - docker rm $(docker ps -a -q) --force
  only:
    - gls/dev
  allow_failure: true

docker-clean-image:
  stage: prepackage
  script:
    - echo 'Docker clean images'
    - cd $PROJECT_HOME
    - docker rmi $(docker images --format '{{.Repository}}:{{.Tag}}' | grep 'gls-discovery')
    - docker rmi $(docker images --format '{{.Repository}}:{{.Tag}}' | grep 'gls-account')
    - docker rmi $(docker images --format '{{.Repository}}:{{.Tag}}' | grep 'gls-proxy')
    - docker rmi $(docker images --format '{{.Repository}}:{{.Tag}}' | grep 'gls-mail')
    - docker rmi $(docker images --format '{{.Repository}}:{{.Tag}}' | grep 'gls-permission')
    - docker rmi $(docker images --format '{{.Repository}}:{{.Tag}}' | grep 'gls-karma')
    - docker rmi $(docker images --format '{{.Repository}}:{{.Tag}}' | grep 'gls-file')
    - docker rmi $(docker images --format '{{.Repository}}:{{.Tag}}' | grep 'gls-lending-gallery')
#    - docker rmi $(docker images --format '{{.Repository}}:{{.Tag}}' | grep 'gls-socket')
    - docker rmi $(docker images --format '{{.Repository}}:{{.Tag}}' | grep 'gls-notification')
    - docker rmi $(docker images --format '{{.Repository}}:{{.Tag}}' | grep 'gls-curator')
  only:
    - gls/dev
  allow_failure: true
    
docker-image-package:
  stage: package
  script:
    - echo 'Docker build images'
    - cd $PROJECT_HOME
    - sudo docker build -t gls-discovery:0.0.1 -f docker/discovery/Dockerfile  ./discovery/build/libs/
    - sudo docker build -t gls-account:0.0.1 -f docker/account/Dockerfile  ./account/build/libs/
    - sudo docker build -t gls-proxy:0.0.1  -f docker/proxy/Dockerfile  ./proxy/build/libs/
    - sudo docker build -t gls-mail:0.0.1 -f docker/mail/Dockerfile  ./mail/build/libs/
    - sudo docker build -t gls-permission:0.0.1 -f docker/permission/Dockerfile  ./permission/build/libs/
    - sudo docker build -t gls-karma:0.0.1 -f docker/karma/Dockerfile  ./karma/build/libs/
    - sudo docker build -t gls-file:0.0.1 -f docker/file/Dockerfile  ./file/build/libs/
    - sudo docker build -t gls-lending-gallery:0.0.1 -f docker/lending-gallery/Dockerfile  ./lending-gallery/build/libs/
#    - sudo docker build -t gls-socket:0.0.1 -f docker/socket/Dockerfile  ./socket/build/libs/
    - sudo docker build -t gls-notification:0.0.1 -f docker/notification/Dockerfile  ./notification/build/libs/
    - sudo docker build -t gls-curator:0.0.1 -f docker/curator/Dockerfile  ./config/elk/
  only:
    - gls/dev

docker-deploy:
  stage: deploy
  script:
    - echo 'Docker deploy'
    - cd $PROJECT_HOME
    - docker stack deploy -c docker/docker-compose-dev-log.yml gls
    - docker ps
  only:
    - gls/dev
